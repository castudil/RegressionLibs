{
    "contents" : "#' LinePlot for PCA (Plot)\n#'\n#' Generate a plot of 10 first variances of Principal Components. This is useful to \n#' determinate which are the most important components.\n#' \n#' @param data.pca a list with class \"prcomp\" containing all principal components \n#' calculated.\n#' @seealso CalculateVariance, plotPC\n#' @examples\n#' iris.x <- iris[,1:4]\n#' ir.pca <- prcomp(iris.x, center = TRUE, scale. = TRUE)\n#' \n#' linePlot(ir.pca)\nlinePlot <- function(data.pca) {\n  rowsData <- length(data.pca$sdev)\n  seqRow <- seq(from = 1, to = rowsData, length.out = rowsData)\n  \n  dataPlot <- data.frame(seqRow, data.pca$sdev)\n  names(dataPlot) <- c(\"PCA\", \"Variances\")\n  dataPlot <- dataPlot[1:10,]\n  dataPlot <- CalculateVariance(dataPlot, 2)\n  \n  ggplot(data = dataPlot, aes(x = PCA, y = Variances, group = 1)) +\n    geom_line(colour = \"dodgerblue4\", alpha = 0.5, size = 1) +\n    geom_point(colour = \"dodgerblue4\", size = 2, alpha = 0.5) +\n    expand_limits(y = 0) +\n    xlab(\"PCs\") + ylab(\"Variances\") +\n    scale_x_continuous(breaks = dataPlot$PCA) +\n    theme(panel.grid.minor = element_blank(), #remove gridlines\n          legend.position = \"bottom\" #legend at the bottom\n    )#end theme\n}\n\n#' Plot PCA (Plot)\n#'\n#' Generate a plot of 2 Principal Components using ggplot. You must indicate which \n#' PC you want in the graph.\n#' \n#' @param data.pca a list with class \"prcomp\" containing all principal components \n#' calculated.\n#' @param dependentVariable is a list of values containig the dependent variable \n#' of your regression model.\n#' @param x_axis an integer that represent the number of the principal component \n#' that you want in your x axis.\n#' @param y_axis an integer that represent the number of the principal component \n#' that you want in your y axis.\n#' @param dependentVariableName is an optional parameter. It's an string that\n#' contains de name of your dependent variable of your regression model.\n#' @seealso linePlot\n#' @examples\n#' iris.x <- iris[,1:3]\n#' Petal.Width <- iris[,4]\n#' ir.pca <- prcomp(iris.x, center = TRUE, scale. = TRUE)\n#' \n#' plotPC(ir.pca, Petal.Width, 1, 2, \"Petal Width\")\nplotPC <- function(data.pca, dependentVariable, x_axis, y_axis, dependentVariableName) {\n  \n  if (missing(\"data.pca\")) {\n    stop(\"Need to specify data.pca!\")\n  }\n  if (missing(\"dependentVariable\")) {\n    stop(\"Need to specify dependentVariable!\")\n  }\n  if (missing(\"x_axis\")) {\n    stop(\"Need to specify x_axis!\")\n  }\n  if (missing(\"y_axis\")) {\n    stop(\"Need to specify y_axis!\")\n  }\n  if (missing(\"dependentVariableName\")) {\n    dependentVariableName <- \"Dependent Variable\"\n  }\n  \n  PCs <- data.frame(data.pca$x[,x_axis], data.pca$x[,y_axis], dependentVariable)\n  x_axis <- paste(c(\"PC\", x_axis), collapse = \"\")\n  y_axis <- paste(c(\"PC\", y_axis), collapse = \"\")\n  names(PCs) <- c(x_axis, y_axis, \"DependentVariable\")\n  \n  ggplot(PCs, aes_string(x = x_axis, y = y_axis)) + \n    geom_point(aes(colour = PCs$DependentVariable), na.rm = TRUE, alpha = 0.8, size = 2) + \n    scale_color_gradientn(name = dependentVariableName,\n                          colours = c(\"darkred\", \"yellow\", \"darkgreen\")) + #set the pallete\n    theme(panel.grid.minor = element_blank(), #remove gridlines\n          legend.position = \"bottom\" #legend at the bottom\n    )#end theme\n}",
    "created" : 1445650440739.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4069986656",
    "id" : "BB8EBD4A",
    "lastKnownWriteTime" : 1445660903,
    "path" : "C:/Users/Mary Iturriaga/Desktop/RegressionLibs/R/Plots.R",
    "project_path" : "R/Plots.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : false,
    "type" : "r_source"
}