{
    "contents" : "#' LinePlot for PCA (Plot)\n#'\n#' Generate a plot of 10 first variances of Principal Components. This is useful to \n#' determinate which are the most important components.\n#' \n#' @param data.pca a list with class \"prcomp\" containing all principal components \n#' calculated.\n#' @seealso CalculateVariance, plotPC\n#' @examples\n#' iris.x <- iris[,1:4]\n#' ir.pca <- prcomp(iris.x, center = TRUE, scale. = TRUE)\n#' \n#' linePlot(ir.pca)\nlinePlot <- function(data.pca) {\n  \n  if (missing(data.pca)) {\n    stop(\"Need to specify data.pca!\")\n  }\n  \n  #All parameters are OK!\n  rowsData <- length(data.pca$sdev)\n  seqRow <- seq(from = 1, to = rowsData, length.out = rowsData)\n  \n  dataPlot <- data.frame(seqRow, data.pca$sdev)\n  names(dataPlot) <- c(\"PCA\", \"Variances\")\n  if (nrow(dataPlot)>10) {\n    dataPlot <- dataPlot[1:10,]\n  }\n  dataPlot <- CalculateVariance(dataPlot, 2)\n  \n  p <- ggplot(data = dataPlot, aes(x = PCA, y = Variances, group = 1)) +\n    geom_line(colour = \"dodgerblue4\", alpha = 0.5, size = 1) +\n    geom_point(colour = \"dodgerblue4\", size = 2, alpha = 0.5) +\n    expand_limits(y = 0) +\n    xlab(\"PCs\") + ylab(\"Variances\") +\n    scale_x_continuous(breaks = dataPlot$PCA) +\n    theme(panel.grid.minor = element_blank(), #remove gridlines\n          legend.position = \"bottom\" #legend at the bottom\n    )#end theme\n  \n  return (p)\n}\n\n#' Plot PCA (Plot)\n#'\n#' Generate a plot of 2 Principal Components using ggplot. You must indicate which \n#' PC you want in the graph.\n#' \n#' @param data.pca a list with class \"prcomp\" containing all principal components \n#' calculated.\n#' @param dependentVariable is a list of values containig the dependent variable \n#' of your regression model.\n#' @param x_axis an integer that represent the number of the principal component \n#' that you want in your x axis.\n#' @param y_axis an integer that represent the number of the principal component \n#' that you want in your y axis.\n#' @param dependentVariableName is an optional parameter. It's an string that\n#' contains de name of your dependent variable of your regression model.\n#' @seealso linePlot\n#' @examples\n#' iris.x <- iris[,1:3]\n#' Petal.Width <- iris[,4]\n#' ir.pca <- prcomp(iris.x, center = TRUE, scale. = TRUE)\n#' \n#' plotPC(ir.pca, Petal.Width, 1, 2, \"Petal Width\")\nplotPC <- function(data.pca, dependentVariable, x_axis, y_axis, dependentVariableName) {\n  \n  if (missing(\"data.pca\")) {\n    stop(\"Need to specify data.pca!\")\n  }\n  if (missing(\"dependentVariable\")) {\n    stop(\"Need to specify dependentVariable!\")\n  }\n  if (missing(\"x_axis\")) {\n    stop(\"Need to specify x_axis!\")\n  }\n  if (missing(\"y_axis\")) {\n    stop(\"Need to specify y_axis!\")\n  }\n  if (missing(\"dependentVariableName\")) {\n    dependentVariableName <- \"Dependent Variable\"\n  }\n  \n  #All parameters are OK!\n  PCs <- data.frame(data.pca$x[,x_axis], data.pca$x[,y_axis], dependentVariable)\n  x_axis <- paste(c(\"PC\", x_axis), collapse = \"\")\n  y_axis <- paste(c(\"PC\", y_axis), collapse = \"\")\n  names(PCs) <- c(x_axis, y_axis, \"DependentVariable\")\n  \n  p <- ggplot(PCs, aes_string(x = x_axis, y = y_axis)) + \n    geom_point(aes(colour = PCs$DependentVariable), na.rm = TRUE, alpha = 0.8, size = 2) + \n    scale_color_gradientn(name = dependentVariableName,\n                          colours = c(\"darkred\", \"yellow\", \"darkgreen\")) + #set the pallete\n    theme(panel.grid.minor = element_blank(), #remove gridlines\n          legend.position = \"bottom\" #legend at the bottom\n    )#end theme\n  \n  return (p)\n}\n\n#' Scatterplot Matrix (Plot)\n#'\n#' Generate a Scatterplot Matrix between a range using ggplot.\n#' \n#' @param data.pca a list with class \"prcomp\" containing all principal components \n#' calculated.\n#' @param from an integer that represent the first principal component that you \n#' want in the scatterplot matrix.\n#' @param to an integer that represent the last principal component that you \n#' want in the scatterplot matrix.\n#' @param dependentVariable is a list of values containig the dependent variable \n#' of your regression model.\n#' @param dependentVariableName is an optional parameter. It's an string that\n#' contains de name of your dependent variable of your regression model.\n#' @seealso makePairs\n#' @source https://gastonsanchez.wordpress.com/2012/08/27/scatterplot-matrices-with-ggplot/\n#' @examples\n#' iris.x <- iris[,1:3]\n#' Petal.Width <- iris[,4]\n#' ir.pca <- prcomp(iris.x, center = TRUE, scale. = TRUE)\n#' \n#' ScatterplotMatrix(ir.pca, 1, 3, Petal.Width, \"Petal Width\")\nScatterplotMatrix<- function(data.pca, from, to, dependentVariable, dependentVariableName){\n  \n  if (missing(data.pca)) {\n    stop(\"Need to specify data.pca!\")\n  }\n  if (missing(dependentVariable)) {\n    stop(\"Need to specify dependentVariable!\")\n  }\n  if (missing(from) || missing(to)) {\n    from <- 1\n    to <- 3\n    if (ncol(data.pca$x) > to) {\n      to <- ncol(data.pca$x)\n    }\n  }\n  if (missing(dependentVariableName)) {\n    dependentVariableName <- \"Dependent Variable\"\n  }\n  \n  #All parameters are OK!\n  # expand data frame for pairs plot\n  PCAfromTo <- as.data.frame(data.pca$x[,from:to])\n  gg1 <- makePairs(PCAfromTo)\n  \n  #New data frame mega PCA from..to\n  mega_PCA <- data.frame(gg1$all, DependentVariable = rep(dependentVariable, length = nrow(gg1$all)))\n  DependentVariable <- rep(dependentVariable, length = nrow(gg1$all))\n  \n  # pairs plot\n  p <- ggplot(mega_PCA, aes_string(x = \"x\", y = \"y\")) + \n    facet_grid(xvar ~ yvar, scales = \"free\") + \n    geom_point(aes(colour = DependentVariable), na.rm = TRUE, alpha = 0.5, size = 1) + \n    stat_density(aes(x = x, y = ..scaled.. * diff(range(x)) + min(x)), \n                 data = gg1$densities, position = \"identity\", \n                 colour = \"dodgerblue4\", geom = \"line\", size = 1, alpha = 0.5) + \n    scale_color_gradientn(name = dependentVariableName,\n                          colours = c(\"darkred\", \"yellow\", \"darkgreen\")) + #set the pallete\n    theme(panel.grid.minor = element_blank(), #remove gridlines\n          legend.position = \"bottom\", #legend at the bottom\n          axis.title.x = element_blank(), #remove x label\n          axis.title.y = element_blank()  #remove y label\n    )#end theme\n  \n  return (p)\n}\n\n#' Plot Columns of Matrices (Plot)\n#'\n#' Generate a plot of the columns of a data set for all or a range of instances. In \n#' some cases this is useful to identify some patron.\n#' \n#' @param dataSet an object of class data frame with the a data set (Independent \n#' variables).\n#' @param dependentVariable is a list of values containig the dependent variable \n#' of your regression model.\n#' @param dependentVariableName is an optional parameter. It's an string that\n#' contains de name of your dependent variable of your regression model.\n#' @param from an integer that represent the first instance that you want in the plot.\n#' @param to an integer that represent the last instance that you want in the plot.\n#' @param x_lab a boolean that represent if you want or not the x axis scale. In \n#' some cases, when you have many columns the plot could be ugly! The default value \n#' is False.\n#' @examples\n#' iris.x <- iris[,1:4]\n#' dependetVariable <- iris[,5]\n#' MatPlot(iris.x, dependetVariable, \"Species\")\n#' MatPlot(iris.x, dependetVariable, \"Species\", x_lab = TRUE)\nMatPlot <- function(dataSet, dependentVariable, dependentVariableName, from, to, x_lab) {\n  if (missing(dataSet)) {\n    stop(\"Need to specify dataSet!\")\n  }\n  if (missing(dependentVariable)) {\n    stop(\"Need to specify dependentVariable!\")\n  }\n  if (missing(dependentVariableName)) {\n    dependentVariableName <- \"Dependent Variable\"\n  }\n  if (missing(from) || missing(to)) {\n    from <- 1\n    to <- nrow(dataSet)\n  }\n  if (from > to) {\n    stop(\"from must be less than to!\")\n  }\n  if (missing(x_lab)) {\n    x_lab = FALSE\n  }\n  \n  #All parameters are OK!\n  x_name = \"Columns\"\n  dataSet <- dataSet[from:to,]\n  dependentVariable <- dependentVariable[from:to]\n  rows <- nrow(dataSet)\n  x <- seq(from = 1, to = rows, length.out = rows)\n  data <- data.frame(x, dataSet)\n  dataPlot <- melt(data, id = \"x\")\n  dataPlot <- data.frame(dataPlot, dependentVariable)\n  \n  if (class(dependentVariable)==\"numeric\") {\n    if (x_lab) {\n      p <- ggplot(dataPlot, aes(variable, value, group = x, colour = dependentVariable)) +\n        geom_line(size = 1) +\n        scale_color_gradientn(name = dependentVariableName,\n                              colours = c(\"darkred\", \"yellow\", \"darkgreen\")) +\n        xlab(x_name) + ylab(\"Values\")\n    }\n    else {\n      p <- ggplot(dataPlot, aes(variable, value, group = x, colour = dependentVariable)) +\n        geom_line(size = 1) +\n        scale_color_gradientn(name = dependentVariableName,\n                              colours = c(\"darkred\", \"yellow\", \"darkgreen\")) +\n        scale_x_discrete(breaks = c()) +\n        xlab(x_name) + ylab(\"Values\")\n    }\n  }\n  else {\n    if (x_lab) {\n      p <- ggplot(dataPlot, aes(variable, value, group = x, colour = dependentVariable)) +\n        geom_line(size = 1) +\n        scale_color_discrete(name = dependentVariableName) +\n        xlab(x_name) + ylab(\"Values\")\n    }\n    else {\n      p <- ggplot(dataPlot, aes(variable, value, group = x, colour = dependentVariable)) +\n        geom_line(size = 1) +\n        scale_color_discrete(name = dependentVariableName) +\n        scale_x_discrete(breaks = c()) +\n        xlab(x_name) + ylab(\"Values\")\n    }\n  }\n  \n  return (p)\n}",
    "created" : 1445650440739.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2944257215",
    "id" : "BB8EBD4A",
    "lastKnownWriteTime" : 1445747118,
    "path" : "C:/Users/Mary Iturriaga/Desktop/RegressionLibs/R/Plots.R",
    "project_path" : "R/Plots.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : false,
    "type" : "r_source"
}