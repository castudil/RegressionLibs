{
    "contents" : "#' Residuals v/s Fitted Values (Plot)\n#'\n#' Generate a plot of fitted values v/s residuals of a regression model.\n#' \n#' @param diagnostic an object of class data frame with differents error types \n#' calculated for make the graph.\n#' @param dependentVariableName is an optional parameter. It's an string that\n#' contains de name of your dependent variable of your regression model.\n#' @seealso diagnosticData, StResidualsFitted, NormalQQ, StResidualsLeverange\n#' @examples\n#' iris.x <- iris[,1:3]\n#' Petal.Width <- iris[,4]\n#' ir.pca <- prcomp(iris.x, center = TRUE, scale. = TRUE)\n#' PCA <- as.data.frame(ir.pca$x)\n#' \n#' PC1 <- PCA[,1]\n#' PC2 <- PCA[,2]\n#' PC3 <- PCA[,3]\n#' \n#' fit <- lm(Petal.Width ~ PC1 + PC2 + PC3, data = PCA)\n#' diagnostic <- diagnosticData(fit)\n#' ResidualsFitted(diagnostic, \"Petal Width\")\nResidualsFitted <- function(diagnostic, dependentVariableName) {\n  \n  if (missing(diagnostic)) {\n    stop(\"Need to specify diagnostic!\")\n  }\n  if (missing(\"dependentVariableName\")) {\n    dependentVariableName <- \"Dependent Variable\"\n  }\n  \n  #All parameters are OK!\n  p <- ggplot(diagnostic, aes(fitted, resid)) +\n    geom_hline(yintercept = 0, colour = \"grey50\", size = 0.5, linetype=\"dashed\") +\n    geom_point(aes(colour = diagnostic$Dependent.Variable), na.rm = TRUE) + \n    scale_color_gradientn(name = dependentVariableName,\n                          colours = c(\"darkred\", \"yellow\", \"darkgreen\")) + #set the pallete\n    geom_smooth(method = \"auto\", size = 0.7, se = F, colour = \"#299E98\") +\n    xlab(\"Fitted Values\") +\n    ylab(\"Residuals\") +\n    theme(legend.position = \"bottom\" #legend at the bottom\n    )#end theme\n  \n  return (p)\n}\n\n#' Standarized Residuals v/s Fitted Values (Plot)\n#'\n#' Generate a plot of fitted values v/s Standarized Residuals of a regression model.\n#' \n#' @param diagnostic an object of class data frame with differents error types \n#' calculated for make the graph.\n#' @param dependentVariableName is an optional parameter. It's an string that\n#' contains de name of your dependent variable of your regression model.\n#' @seealso diagnosticData, ResidualsFitted, NormalQQ, StResidualsLeverange\n#' @examples\n#' iris.x <- iris[,1:3]\n#' Petal.Width <- iris[,4]\n#' ir.pca <- prcomp(iris.x, center = TRUE, scale. = TRUE)\n#' PCA <- as.data.frame(ir.pca$x)\n#' \n#' PC1 <- PCA[,1]\n#' PC2 <- PCA[,2]\n#' PC3 <- PCA[,3]\n#' \n#' fit <- lm(Petal.Width ~ PC1 + PC2 + PC3, data = PCA)\n#' diagnostic <- diagnosticData(fit)\n#' StResidualsFitted(diagnostic, \"Petal Width\")\nStResidualsFitted <- function(diagnostic, dependentVariableName) {\n  \n  if (missing(diagnostic)) {\n    stop(\"Need to specify diagnostic!\")\n  }\n  if (missing(\"dependentVariableName\")) {\n    dependentVariableName <- \"Dependent Variable\"\n  }\n  \n  #All parameters are OK!\n  p <- ggplot(diagnostic, aes(fitted, sqrt.abs.stz.r)) +\n    geom_point(aes(colour = diagnostic$Dependent.Variable), na.rm = TRUE) + \n    scale_color_gradientn(name = dependentVariableName,\n                          colours = c(\"darkred\", \"yellow\", \"darkgreen\")) + #set the pallete\n    geom_smooth(method = \"auto\", size = 0.7, se = F, colour = \"#299E98\") +\n    xlab(\"Fitted Values\") +\n    ylab(expression(sqrt(\"|Standarized Residuals|\"))) +\n    theme(legend.position = \"bottom\" #legend at the bottom\n    )#end theme\n  \n  return (p)\n}\n\n#' Normal-QQ (Plot)\n#'\n#' Generate a plot of theoretical quantiles v/s Standarized Residuals of a \n#' regression model.\n#' \n#' @param diagnostic an object of class data frame with differents error types \n#' calculated for make the graph.\n#' @param dependentVariableName is an optional parameter. It's an string that\n#' contains de name of your dependent variable of your regression model.\n#' @note Part of this code, it's from \n#' http://librestats.com/2012/06/11/autoplot-graphical-methods-with-ggplot2/\n#' @seealso diagnosticData, ResidualsFitted, StResidualsFitted, StResidualsLeverange\n#' @examples\n#' iris.x <- iris[,1:3]\n#' Petal.Width <- iris[,4]\n#' ir.pca <- prcomp(iris.x, center = TRUE, scale. = TRUE)\n#' PCA <- as.data.frame(ir.pca$x)\n#' \n#' PC1 <- PCA[,1]\n#' PC2 <- PCA[,2]\n#' PC3 <- PCA[,3]\n#' \n#' fit <- lm(Petal.Width ~ PC1 + PC2 + PC3, data = PCA)\n#' diagnostic <- diagnosticData(fit)\n#' NormalQQ(diagnostic, \"Petal Width\")\nNormalQQ <- function(diagnostic, dependentVariableName) {\n  \n  if (missing(diagnostic)) {\n    stop(\"Need to specify diagnostic!\")\n  }\n  if (missing(\"dependentVariableName\")) {\n    dependentVariableName <- \"Dependent Variable\"\n  }\n  \n  #All parameters are OK!\n  a <- quantile(diagnostic$stz.r, c(0.25, 0.75))\n  b <- qnorm(c(0.25, 0.75))\n  slope <- diff(a)/diff(b)\n  int <- a[1] - slope * b[1]\n  \n  p <- ggplot(diagnostic, aes(sample = diagnostic$stz.r)) +\n    stat_qq() +\n    geom_abline(slope = slope, intercept = int, colour = \"#299E98\", linetype=\"dashed\") +\n    geom_abline(slope = 0, intercept = -2, colour = \"#299E98\", linetype=\"dashed\") +\n    geom_abline(slope = 0, intercept = 2, colour = \"#299E98\", linetype=\"dashed\") +\n    scale_x_continuous(\"Theoretical Quantiles\") +\n    scale_y_continuous(\"Standardized Residuals\")\n  \n  return (p)\n}\n\n#' Leverange v/s Standarized Residuals (Plot)\n#'\n#' Generate a plot of Standarized Residuals v/s Leverange of a regression model.\n#' \n#' @param diagnostic an object of class data frame with differents error types \n#' calculated for make the graph.\n#' @param dependentVariableName is an optional parameter. It's an string that\n#' contains de name of your dependent variable of your regression model.\n#' @seealso diagnosticData, ResidualsFitted, StResidualsFitted, NormalQQ\n#' @examples\n#' iris.x <- iris[,1:3]\n#' Petal.Width <- iris[,4]\n#' ir.pca <- prcomp(iris.x, center = TRUE, scale. = TRUE)\n#' PCA <- as.data.frame(ir.pca$x)\n#' \n#' PC1 <- PCA[,1]\n#' PC2 <- PCA[,2]\n#' PC3 <- PCA[,3]\n#' \n#' fit <- lm(Petal.Width ~ PC1 + PC2 + PC3, data = PCA)\n#' diagnostic <- diagnosticData(fit)\n#' StResidualsLeverange(diagnostic, \"Petal Width\")\nStResidualsLeverange <- function(diagnostic, dependentVariableName) {\n  \n  if (missing(diagnostic)) {\n    stop(\"Need to specify diagnostic!\")\n  }\n  if (missing(\"dependentVariableName\")) {\n    dependentVariableName <- \"Dependent Variable\"\n  }\n  \n  #All parameters are OK!\n  p <- ggplot(diagnostic, aes(leverage, stz.r)) +\n    geom_hline(yintercept = 0, colour = \"grey50\", size = 0.5, linetype=\"dashed\") +\n    geom_point(aes(colour = diagnostic$Dependent.Variable), na.rm = TRUE) + \n    scale_color_gradientn(name = dependentVariableName, colours = c(\"darkred\", \"yellow\", \"darkgreen\")) + #set the pallete\n    geom_smooth(method = \"auto\", size = 0.7, se = F, colour = \"#299E98\") +\n    xlab(\"Leverange\") +\n    ylab(\"Standarized Residuals\") +\n    theme(legend.position = \"bottom\" #legend at the bottom\n    )#end theme\n  \n  return (p)\n}",
    "created" : 1445648567538.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "467432847",
    "id" : "C5E2CD29",
    "lastKnownWriteTime" : 1445747165,
    "path" : "C:/Users/Mary Iturriaga/Desktop/RegressionLibs/R/DiagnosticsPlots.R",
    "project_path" : "R/DiagnosticsPlots.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}